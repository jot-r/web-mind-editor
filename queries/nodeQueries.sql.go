// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: nodeQueries.sql

package queries

import (
	"context"
	"database/sql"
)

const createNode = `-- name: CreateNode :exec
INSERT INTO NODE(
	NODE_ID,
	NODE_CONTENT_ID)
VALUES(?, ?)
`

type CreateNodeParams struct {
	NodeID        string
	NodeContentID string
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) error {
	_, err := q.db.ExecContext(ctx, createNode, arg.NodeID, arg.NodeContentID)
	return err
}

const createNodeContent = `-- name: CreateNodeContent :exec
INSERT INTO NODE_CONTENT(
	NODE_CONTENT_ID, 
	BACKGROUND_COLOR, 
	CREATED_TIMESTAMP, 
	MODIFIED_TIMESTAMP, 
	FREEMIND_ID, 
	TEXT, 
	NOTE, 
	URL, 
	STYLE, 
	ICONS,
	FONT_NAME, 
	FONT_BOLD, 
	FONT_SIZE) 
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateNodeContentParams struct {
	NodeContentID     string
	BackgroundColor   sql.NullString
	CreatedTimestamp  sql.NullInt64
	ModifiedTimestamp sql.NullInt64
	FreemindID        sql.NullString
	Text              sql.NullString
	Note              sql.NullString
	Url               sql.NullString
	Style             sql.NullString
	Icons             sql.NullString
	FontName          sql.NullString
	FontBold          sql.NullInt64
	FontSize          sql.NullInt64
}

func (q *Queries) CreateNodeContent(ctx context.Context, arg CreateNodeContentParams) error {
	_, err := q.db.ExecContext(ctx, createNodeContent,
		arg.NodeContentID,
		arg.BackgroundColor,
		arg.CreatedTimestamp,
		arg.ModifiedTimestamp,
		arg.FreemindID,
		arg.Text,
		arg.Note,
		arg.Url,
		arg.Style,
		arg.Icons,
		arg.FontName,
		arg.FontBold,
		arg.FontSize,
	)
	return err
}

const createNodeRelation = `-- name: CreateNodeRelation :exec
INSERT INTO NODE_RELATION(
	PARENT_NODE_ID,
	CHILD_NODE_ID,
	CHILD_NODE_KEY)
VALUES(?, ?, ?)
`

type CreateNodeRelationParams struct {
	ParentNodeID string
	ChildNodeID  string
	ChildNodeKey string
}

func (q *Queries) CreateNodeRelation(ctx context.Context, arg CreateNodeRelationParams) error {
	_, err := q.db.ExecContext(ctx, createNodeRelation, arg.ParentNodeID, arg.ChildNodeID, arg.ChildNodeKey)
	return err
}

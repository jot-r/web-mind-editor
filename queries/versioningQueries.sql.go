// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: versioningQueries.sql

package queries

import (
	"context"
	"database/sql"
)

const createBranch = `-- name: CreateBranch :exec
INSERT INTO BRANCH(
	BRANCH_ID,
	BRANCH_NAME,
	DOCUMENT_ID,
	COMMIT_ID,
	CREATED_TIMESTAMP)
VALUES(?, ?, ?, ?, ?)
`

type CreateBranchParams struct {
	BranchID         string
	BranchName       sql.NullString
	DocumentID       string
	CommitID         string
	CreatedTimestamp int64
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) error {
	_, err := q.db.ExecContext(ctx, createBranch,
		arg.BranchID,
		arg.BranchName,
		arg.DocumentID,
		arg.CommitID,
		arg.CreatedTimestamp,
	)
	return err
}

const createCommit = `-- name: CreateCommit :exec
INSERT INTO COMMITS(
	COMMIT_ID,
	ROOT_NODE_ID,
	PARENT_COMMIT_ID,
	CREATED_TIMESTAMP) 
VALUES(?, ?, ?, ?)
`

type CreateCommitParams struct {
	CommitID         string
	RootNodeID       string
	ParentCommitID   sql.NullString
	CreatedTimestamp int64
}

func (q *Queries) CreateCommit(ctx context.Context, arg CreateCommitParams) error {
	_, err := q.db.ExecContext(ctx, createCommit,
		arg.CommitID,
		arg.RootNodeID,
		arg.ParentCommitID,
		arg.CreatedTimestamp,
	)
	return err
}

const createDocument = `-- name: CreateDocument :exec
INSERT INTO DOCUMENT(
	DOCUMENT_ID,
	DOCUMENT_NAME, 
	FORMAT_VERSION,
	CREATED_TIMESTAMP,
	MAIN_BRANCH_ID)
VALUES(?, ?, ?, ?, ?)
`

type CreateDocumentParams struct {
	DocumentID       string
	DocumentName     sql.NullString
	FormatVersion    sql.NullString
	CreatedTimestamp int64
	MainBranchID     string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) error {
	_, err := q.db.ExecContext(ctx, createDocument,
		arg.DocumentID,
		arg.DocumentName,
		arg.FormatVersion,
		arg.CreatedTimestamp,
		arg.MainBranchID,
	)
	return err
}

const createRevision = `-- name: CreateRevision :exec
INSERT INTO REVISION(
	REVISION_ID,
	DOCUMENT_ID,
	CREATED_TIMESTAMP,
	COMMENT,
	COMMIT_ID)
VALUES(?, ?, ?, ?, ?)
`

type CreateRevisionParams struct {
	RevisionID       string
	DocumentID       string
	CreatedTimestamp int64
	Comment          sql.NullString
	CommitID         string
}

func (q *Queries) CreateRevision(ctx context.Context, arg CreateRevisionParams) error {
	_, err := q.db.ExecContext(ctx, createRevision,
		arg.RevisionID,
		arg.DocumentID,
		arg.CreatedTimestamp,
		arg.Comment,
		arg.CommitID,
	)
	return err
}
